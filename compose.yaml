# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  server:
    build:
      context: .
    environment:
      NODE_ENV: production
      DB_HOST: host.docker.internal
      DB_USER: Zajac
      DB_PASSWORD: 12345
      DB_NAME: paper_submission_system
      DB_PORT: 3306
      JWT_SECRET: c85d721ba95fcd5b3c63d32860620ba23dd06bc94a25ef3c11e89c351e17318b
      JWT_EXPIRES_IN: 24h
    ports:
      - 5000:5000
    # 允许容器访问主机上的服务
    extra_hosts:
      - "host.docker.internal:host-gateway"
  
#   db:
#     image: mysql:8
#     restart: always
#     environment:
#       MYSQL_ROOT_PASSWORD: password
#       MYSQL_DATABASE: paper_submission_system
#     volumes:
#       - db-data:/var/lib/mysql
#       - ./SQL/create_tables.sql:/docker-entrypoint-initdb.d/init.sql
#     ports:
#       - 3306:3306
#     healthcheck:
#       test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
#       interval: 10s
#       timeout: 5s
#       retries: 5

# volumes:
#   db-data:

# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker-compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

